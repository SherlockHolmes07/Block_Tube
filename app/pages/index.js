import Head from "next/head";
import styles from "../styles/Home.module.css";
import "bootstrap/dist/css/bootstrap.css";
import Web3Modal from "web3modal";
import { providers} from "ethers";
import { useEffect, useRef, useState } from "react";
import Upload from "./upload";
import Home from "./home";

export default function Index() {

    // walletConnected keep track of whether the user's wallet is connected or not
    const [walletConnected, setWalletConnected] = useState(false);
    // loading is set to true when we are waiting for a transaction to get mined
    const [loading, setLoading] = useState(false);
    // userAddress is the user's wallet address
    const [userAddress, setUserAddress] = useState("");
    // pageDisplay is used to render the page based on the user's action
    const [pageDisplay, setPageDisplay] = useState("home");


    const web3ModalRef = useRef();
    
    // This function is used to get the provider or signer from the web3Model instance
    const getProviderOrSigner = async (needSigner = false) => {
      // Connect to Metamask
      // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object
      const provider = await web3ModalRef.current.connect();
      const web3Provider = new providers.Web3Provider(provider);

      
  
      // If user is not connected to the Goerli network, let them know and throw an error
      const { chainId } = await web3Provider.getNetwork();
      if (chainId !== 80001) {
        window.alert("Change the network to Mumbai");
        throw new Error("Change network to Mumbai");
      }
  
      if (needSigner) {
        const signer = web3Provider.getSigner();
        return signer;
      }
      return web3Provider;
    };

    // connects to the wallet
    const connectWallet = async () => {
      try {
        // Get the provider from web3Modal, which in our case is MetaMask
        // When used for the first time, it prompts the user to connect their wallet
        await getProviderOrSigner();
        setWalletConnected(true);

        // Get the user's address
        const provider = await getProviderOrSigner();
        const signer = provider.getSigner();
        const address = await signer.getAddress();
        setUserAddress(address);
  
      } catch (err) {
        console.error(err);
      }
    };
  
    useEffect(() => {
      // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet
      if (!walletConnected) {
        // Assign the Web3Modal class to the reference object by setting it's `current` value
        // The `current` value is persisted throughout as long as this page is open
        web3ModalRef.current = new Web3Modal({
          network: "mumbai",
          providerOptions: {},
          disableInjectedProvider: false,
        });
        connectWallet();
      }
    }, [walletConnected]);


    

    const renderProfile = () => {
      // if wallet is connected, display the user's address
      if (walletConnected) {
        return (
          <div className="btn btn-dark" onClick={() => connectWallet()}>
            {userAddress.slice(0,6) + "..." + userAddress.slice(-4)} 
          </div>
        )
      }
      // if wallet is not connected, display the connect wallet button
      else {
        return (
          <div className="btn btn-dark" onClick={() => connectWallet()} style={{width: "auto"}}>
             Connect Wallet
          </div>
        )
      }
    }

    // renderPage is used to render the page based on the user's action
    const renderPage = () => {
       if(pageDisplay === "upload") {
        if(!walletConnected) return(
          <div className="alert alert-danger" role="alert">
            Please connect your wallet to upload a video
          </div>
        )
        return (
          <Upload getProviderOrSigner={getProviderOrSigner} />
        )
       }
       else if(pageDisplay === "home") {
        return (
          <Home getProviderOrSigner={getProviderOrSigner} pageDisplay={pageDisplay} setPageDisplay={setPageDisplay}/>
        )
       }

    }
  



  return (
    <>
      <Head>
        <title>BlockTube</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" />    
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <div className="container-fluid">
          <div className="row">

            <div
              className="col-sm-2 col-md-2 col-lg-2 col-xl-1"
              style={{ minHeight: "100vh",maxHeight: "auto", borderRight: "2px solid #1F1E27" }}
            >
              <img
                src="/list.svg"
                alt="menu"
                height={35}
                className={styles.list}
              />

              <button className="btn btn-dark mt-4" onClick={() => setPageDisplay("home")} style={{width: "85px", marginTop: "10px"}}>Home</button>

              <button className="btn btn-dark mt-4" onClick={() => setPageDisplay("upload")} style={{width: "85px", marginTop: "10px"}}>Upload</button>

            </div>

            <div className="col-sm-10 col-md-10 col-lg-10 col-xl-10">

              <div className="row">
                <div style={{ height: "22px", width: "150px" }}>
                  <img
                    src="/favicon.ico"
                    alt="logo"
                    className={styles.favicon}
                  />
                </div>
                
                <div className="d-flex justify-content-center" align="center">
                <form className={styles.search}>
                  <input type="text" placeholder="Search" className="form-control" style={{ maxWidth: "450px", borderRadius: "30px", height: "110%", flexWrap: "wrap" }} />
                </form>     
                {renderProfile()}
                </div>
              </div>
              <br />
              <br />
              <br />

                {renderPage()}


            </div>


          </div>
        </div>

      </main>
    </>
  );
}
